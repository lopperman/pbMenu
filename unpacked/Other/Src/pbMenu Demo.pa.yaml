# ************************************************************************************************
# Warning: YAML source code for Canvas Apps should only be used to review changes made within Power Apps Studio and for minor edits (Preview).
# Use the maker portal to create and edit your Power Apps.
# 
# The schema file for Canvas Apps is available at https://go.microsoft.com/fwlink/?linkid=2304907
# 
# For more information, visit https://go.microsoft.com/fwlink/?linkid=2292623
# ************************************************************************************************
Screens:
  pbMenu Demo:
    Properties:
      Fill: =RGBA(255, 255, 255, 1)
      LoadingSpinnerColor: =RGBA(0, 120, 212, 1)
      OnVisible: |-
        =If(menusInitialized <> true,
            Select(btnDemoRebuildMenus);
            UpdateContext({menusInitialized: true});
        );


        UpdateContext({vert1Menu: "mainVert1"});
        UpdateContext({vert2Menu: "mainVert2"});
        If(IsBlank(fromScreen), 
            UpdateContext({fromScreen: 'pbMenu Demo'})
        );
    Children:
      - Header1:
          Control: Header@0.0.44
          Properties:
            Height: =40
            Logo: =stickeromglove
            OnSelectLogo: =Navigate('pbMenu Sandbox',ScreenTransition.Fade)
      - MM:
          Control: CanvasComponent
          ComponentName: pbMenu
          Properties:
            BorderColor: =PowerAppsTheme.Colors.Darker20
            BorderWidth: =1
            BusyBehavior: =Self.BusyBehaviorChoices.Spinning
            BusyMessage: =""
            CancelMenuColorPalette: =
            ConfirmationColorPalette: =
            DefaultCollapsedState: =true
            EnableUserCollapse: =true
            Height: =Self.MinimumHeight()
            IsBusy: =spin.waiting=true
            IsBusyEnabled: =true
            ManageItemStates: =true
            MenuColorPalette: =
            MenuItemTextColor: =
            MenuKey: ="Main"
            OnBeforeAction: "=Switch(Upper(p_itemKey), \n    Upper(\"miNavBuild\"), Navigate('Menu Builder',ScreenTransition.Fade); true, \n    Upper(\"togglePerfLogging\"), \n        Set(pbMenu_LogPerformance,Not(pbMenu_LogPerformance));\n        Notify($\"'pbMenu_LogPerformance' global variable is now set to: {pbMenu_LogPerformance}.  Any pbMenu using 'pbMenu_LogPerformance' for the Log Performance property will now use this value\",NotificationType.Information,5000);\n        true, \n    Upper(\"miNavPerf\"),  Navigate(PerformanceLog,ScreenTransition.Fade); true, \n    \n    false \n)"
            OnRemoveMenuItem: =
            OverrideExpandedWidth: =0
            OverrideMinHeight: =0
            PerformanceLogging: =pbMenu_LogPerformance
            Reset: =Reset(MM)
            ShowNavBackButton: =fromScreen.Name <> 'pbMenu Demo'.Name
            ToolbarOrientation: =MM.LayoutChoices.Horizontal
            ToolbarPadding: =If(Upper(MM.ToolbarOrientation)=Upper(MM.LayoutChoices.Horizontal), 'Toolbar.Padding'.Medium,  'Toolbar.Padding'.Small)
            Width: =Parent.Width
            Y: =Header1.Y + Header1.Height
      - pbMenu_Vert:
          Control: CanvasComponent
          ComponentName: pbMenu
          Properties:
            BorderColor: =PowerAppsTheme.Colors.Darker20
            BorderWidth: =1
            BusyBehavior: =Self.BusyBehaviorChoices.Spinning
            BusyMessage: =""
            CancelMenuColorPalette: =
            ConfirmationColorPalette: =
            DefaultCollapsedState: =true
            EnableUserCollapse: =true
            Fill: =RGBA(214, 221, 224, 1)
            Height: =Parent.Height - Self.Y -8
            IsBusy: =spin.waiting=true
            IsBusyEnabled: =true
            ManageItemStates: =true
            MenuColorPalette: =RGBA(189, 49, 51, 1)
            MenuItemTextColor: =
            MenuKey: =vert1Menu
            OnBeforeAction: "=Set(spin,{waiting: true,msg: $\"Busy, please wait: {Text(Now(),\"hh:mm:ss am/pm\")}\"});\nWith({handled: \n    Switch(Upper(p_itemKey), \n        Upper(\"useMenu_mainVert1\"), UpdateContext({vert1Menu:\"mainVert1\"}); Self.ItemState_UpdateAll(true); true, \n        Upper(\"useMenu_mainVert2\"), UpdateContext({vert1Menu:\"mainVert2\"}); Self.ItemState_UpdateAll(true); true, \n        Upper(\"disableOtherMenus\"), MM.ItemState_UpdateAll(false); pbMenu_Vert_1.ItemState_UpdateAll(false); true, \n        Upper(\"enableOtherMenus\"), MM.ItemState_UpdateAll(true); pbMenu_Vert_1.ItemState_UpdateAll(true); true, \n\n        false\n    )},\n//    If(Not(handled), \n//        Notify($\"Normally, this menu item ({Self.MenuKey}.{p_itemKey}) would be wired up to something!\",NotificationType.Information,2000)\n//    );\n    //add false here to route request back to pbMenu action handler\n    handled  \n);\nSet(spin,Blank());\n\n        \n"
            OnRemoveMenuItem: =
            OverrideExpandedWidth: =160
            OverrideMinHeight: =0
            PerformanceLogging: =pbMenu_LogPerformance
            Reset: =Reset(pbMenu_Vert)
            ShowNavBackButton: =false
            ToolbarOrientation: =pbMenu_Vert.LayoutChoices.Vertical
            ToolbarPadding: =""
            Width: =Self.MinimumWidth()
            Y: '=MM.Y + MM.Height + 10 '
      - pbMenu_Vert_1:
          Control: CanvasComponent
          ComponentName: pbMenu
          Properties:
            BorderColor: =PowerAppsTheme.Colors.Lighter50
            BorderWidth: =1
            BusyBehavior: =Self.BusyBehaviorChoices.Disabled
            BusyMessage: =""
            CancelMenuColorPalette: =
            ConfirmationColorPalette: =
            DefaultCollapsedState: =true
            EnableUserCollapse: =true
            Fill: =RGBA(252, 252, 217, 1)
            Height: =Parent.Height - Self.Y -8
            IsBusy: =spin.waiting=true
            IsBusyEnabled: =true
            ManageItemStates: =true
            MenuColorPalette: =RGBA(45, 128, 40, 1)
            MenuItemTextColor: =
            MenuKey: =vert2Menu
            OnBeforeAction: "=With({handled: \n    Switch(Upper(p_itemKey), \n        Upper(\"useMenu_mainVert1\"), UpdateContext({vert2Menu:\"mainVert1\"}); Self.ItemState_UpdateAll(true); true, \n        Upper(\"useMenu_mainVert2\"), UpdateContext({vert2Menu:\"mainVert2\"}); Self.ItemState_UpdateAll(true); true, \n        false\n    )},\n    If(Not(handled), \n        Notify($\"Normally, this menu item ({Self.MenuKey}.{p_itemKey}) would be wired up to something!\",NotificationType.Information,2000)\n    );\n    //add false here to route request back to pbMenu action handler\n    true \n)\n\n        \n"
            OnRemoveMenuItem: =
            OverrideExpandedWidth: =150
            OverrideMinHeight: =0
            PerformanceLogging: =pbMenu_LogPerformance
            Reset: =Reset(pbMenu_Vert_1)
            ShowNavBackButton: =false
            ToolbarOrientation: =pbMenu_Vert_1.LayoutChoices.Vertical
            ToolbarPadding: =""
            Width: =Self.MinimumWidth()
            X: =pbMenu_Vert.X + pbMenu_Vert.Width
            Y: '=MM.Y + MM.Height + 10 '
      - Container1:
          Control: GroupContainer@1.3.0
          Variant: ManualLayout
          Properties:
            BorderColor: '=PowerAppsTheme.Colors.Lighter20 '
            BorderThickness: =2
            Fill: =PowerAppsTheme.Colors.Lighter80
            Height: '=Parent.Height - Self.Y - 10 '
            Width: '=Parent.Width - Self.X - 10 '
            X: =pbMenu_Vert_1.X + pbMenu_Vert_1.Width + 10
            Y: '=cont_BuildUtil.Y + cont_BuildUtil.Height + 10 '
          Children:
            - txtEasyStartLabel:
                Control: Text@0.0.51
                Properties:
                  AutoHeight: =true
                  Text: ="STEPS TO QUICKLY GET GOING WITH pbMenu"
                  Weight: ='TextCanvas.Weight'.Bold
                  Width: '=Parent.Width - Self.X * 2 '
                  X: =10
                  Y: =10
            - btnEasyStart:
                Control: Button@0.0.45
                Properties:
                  DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
                  Height: =80
                  OnSelect: =Navigate('Get Started',ScreenTransition.Fade)
                  Text: ="CLICK FOR MINIMUM STEP-BY-STEP INSTRUCTIONS TO START USING THE pbMenu COMPONENT"
                  Width: =400
                  X: =10
                  Y: =40
      - cont_BuildUtil:
          Control: GroupContainer@1.3.0
          Variant: ManualLayout
          Properties:
            BorderColor: '=PowerAppsTheme.Colors.Lighter20 '
            BorderThickness: =2
            Fill: =PowerAppsTheme.Colors.PrimaryForeground
            Height: =300
            Width: '=Parent.Width - Self.X - 10 '
            X: =pbMenu_Vert_1.X + pbMenu_Vert_1.Width + 10
            Y: "=MM.Y + MM.Height + 10 +100\n//Container1.Y + Container1.Height + 10 "
          Children:
            - txtInteractiveBuildTitle:
                Control: Text@0.0.51
                Properties:
                  AutoHeight: =true
                  Text: '="Interactive Build Menu Demo" '
                  Weight: ='TextCanvas.Weight'.Bold
                  Width: '=Parent.Width - Self.X * 2 '
                  X: =10
                  Y: =10
            - txtInteractiveBuildInfo:
                Control: Text@0.0.51
                Properties:
                  AutoHeight: =true
                  Height: '=Parent.Height - Self.Y - 10 '
                  Text: |-
                    ="Click the 'MENU BUILDER' menu item to build and interact with the pbMenu" & const_CrLf & const_CrLf & 
                    "*** Choose and switch between Horizontal, Vertical Fixed Width, and Vertical Collapsible layouts" & const_CrLf & 
                    "*** Use custom color palette to select toolbar button colors" & const_CrLf & 
                    "*** Build menu items, add optional spacers" & const_CrLf & 
                    "*** Create menu items that disable automatically when selected (or manage menu item states manually" & const_CrLf & 
                    "*** Create menu items that require user confirmation after initial selection" & const_CrLf & 
                    "*** Choose behavior of menu when application is busy" & const_CrLf & 
                    "*** Instantly change available menu items" & const_CrLf & 
                    "*** View all information about a menu, including filterable pbMenu properties, functions, actions, and events" & const_CrLf & 
                    "*** Build JSON for adding menu items at run-time"
                  Weight: ='TextCanvas.Weight'.Semibold
                  Width: '=Parent.Width - Self.X * 2 '
                  X: '=txtInteractiveBuildTitle.X '
                  Y: '=txtInteractiveBuildTitle.Y + txtInteractiveBuildTitle.Height + 10 '
      - btnDemoIsNotBusy:
          Control: Button@0.0.45
          Properties:
            BasePaletteColor: =PowerAppsTheme.Colors.Lighter60
            BorderColor: =RGBA(224, 86, 6, 1)
            BorderStyle: =BorderStyle.Solid
            BorderThickness: =1
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            OnSelect: =Set(spin,Blank());
            Text: ="Is Not Busy"
            Width: =126
            X: '=btnDemoDisableAll.X + btnDemoDisableAll.Width + 2 '
            Y: '=btnDemoIsBusy.Y + btnDemoIsBusy.Height + 2 '
      - btnDemoIsBusy:
          Control: Button@0.0.45
          Properties:
            BasePaletteColor: =PowerAppsTheme.Colors.Lighter60
            BorderColor: =RGBA(224, 86, 6, 1)
            BorderStyle: =BorderStyle.Solid
            BorderThickness: =1
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            OnSelect: |+
              =Set(spin,{waiting: true,msg: $"Busy, please wait: {Text(Now(),"hh:mm:ss am/pm")}"});

            Text: ="Is Busy"
            Width: =126
            X: '=btnDemoEnableAll.X + btnDemoEnableAll.Width + 2 '
            Y: =MM.Y + MM.Height + 10
      - btnDemoDisableAll:
          Control: Button@0.0.45
          Properties:
            BasePaletteColor: =PowerAppsTheme.Colors.Lighter60
            BorderColor: =RGBA(224, 86, 6, 1)
            BorderStyle: =BorderStyle.Solid
            BorderThickness: =1
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            OnSelect: =MM.ItemState_UpdateAll(false)
            Text: ="disable all"
            Width: =126
            X: =pbMenu_Vert_1.X + pbMenu_Vert_1.Width + 10
            Y: '=btnDemoEnableAll.Y + btnDemoEnableAll.Height + 2 '
      - btnDemoEnableAll:
          Control: Button@0.0.45
          Properties:
            BasePaletteColor: =PowerAppsTheme.Colors.Lighter60
            BorderColor: =RGBA(224, 86, 6, 1)
            BorderStyle: =BorderStyle.Solid
            BorderThickness: =1
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            OnSelect: =MM.ItemState_UpdateAll(true)
            Text: ="enable all"
            Width: =126
            X: =pbMenu_Vert_1.X + pbMenu_Vert_1.Width + 10
            Y: =MM.Y + MM.Height + 10
      - btnDemoRebuildMenus:
          Control: Button@0.0.45
          Properties:
            BasePaletteColor: =PowerAppsTheme.Colors.Lighter60
            BorderColor: =RGBA(224, 86, 6, 1)
            BorderStyle: =BorderStyle.Solid
            BorderThickness: =1
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            Height: =66
            Icon: ="GlobeError"
            OnSelect: |-
              =    Set(spin,{waiting: true,msg: "Please wait ..."});
                  Clear(col_pbMenuUtil);
                  MM.DeleteMenu("main");
                  MM.CreateMenuItem("Main","miNavBuild","MENU BUILDER","ArrowRight",MM.ItemAppearanceChoices.Primary,MM.ItemIconStyleChoices.Filled,"Build a Menu",false,false,true);
                  MM.CreateMenuItem("Main","miNavPerf","PERF LOG","ArrowRight",MM.ItemAppearanceChoices.Primary,MM.ItemIconStyleChoices.Filled,"View Performance Log",false,false,true);
                  MM.CreateSpacer("Main",true);
                  MM.CreateMenuItem("Main","launchGithub","lopperman @ github","Open",MM.ItemAppearanceChoices.Outline,MM.ItemIconStyleChoices.Filled,"Paul Brower Github Profile",false,false,true);
                  MM.CreateMenuItem("Main","launchReddit","ITFuture @ reddit","Open",MM.ItemAppearanceChoices.Outline,MM.ItemIconStyleChoices.Filled,"Paul Brower Reddit Profile",false,false,true);
                  MM.CreateMenuItem("Main","TogglePerfLogging","Toggle Perf Logging","ServiceBell",MM.ItemAppearanceChoices.Outline,MM.ItemIconStyleChoices.Filled,"",false,false,true);

                  MM.DeleteMenu("mainvert1");
                  MM.CreateInfoItem("mainVert1","Menu: MainVert1",MM.ItemAppearanceChoices.Outline,"Menu Name",true);
                  MM.CreateMenuItem("mainVert1","launchGithub","lopperman @ github","Open",MM.ItemAppearanceChoices.Outline,MM.ItemIconStyleChoices.Filled,"Paul Brower Github Profile",true,false,true);
                  MM.CreateMenuItem("mainVert1","launchReddit","ITFuture @ reddit","Open",MM.ItemAppearanceChoices.Outline,MM.ItemIconStyleChoices.Filled,"Paul Brower Reddit Profile",true,false,true);
                  MM.CreateSpacer("mainVert1",true);
                  MM.CreateMenuItem("mainVert1","useMenu_mainVert2","Use Menu V2","People",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Demo",false,true,true);
                  MM.CreateSpacer("mainVert1",true);
                  MM.CreateMenuItem("mainVert1","disableOtherMenus","Disable Menus","DismissCircle",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Disable Other Menus",true,false,true);
                  MM.CreateMenuItem("mainVert1","enableOtherMenus","Enable Menus","CheckmarkCircle",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Enable Other Menus",true,false,true);

                  MM.DeleteMenu("mainvert2");
                  MM.CreateInfoItem("mainVert2","Menu: MainVert2",MM.ItemAppearanceChoices.Outline,"Menu Name",true);
                  MM.CreateMenuItem("mainVert2","miNavBuild","MENU BUILDER","ArrowRight",MM.ItemAppearanceChoices.Primary,MM.ItemIconStyleChoices.Filled,"Build a Menu",false,false,true);
                  MM.CreateMenuItem("mainVert2","launchGithub","lopperman @ github","Open",MM.ItemAppearanceChoices.Outline,MM.ItemIconStyleChoices.Filled,"Paul Brower Github Profile",true,false,true);
                  MM.CreateMenuItem("mainVert2","launchReddit","ITFuture @ reddit","Open",MM.ItemAppearanceChoices.Outline,MM.ItemIconStyleChoices.Filled,"Paul Brower Reddit Profile",true,false,true);
                  MM.CreateSpacer("mainVert2",true);
                  MM.CreateMenuItem("mainVert2","useMenu_mainVert1","Use Menu V1","Person",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Demo",true,true,true);

                  MM.DeleteMenu("menubuilder");
                  MM.CreateMenuItem("MenuBuilder","mbBuild","BUILD","Settings",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Create Menu Items",true,false,true);
                  MM.CreateMenuItem("MenuBuilder","mbViewData","VIEW MENU INFO","Eye",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Menu Data",true,false,true);
                  MM.CreateSpacer("menuBuilder",true);
                  MM.CreateMenuItem("MenuBuilder","mbExampleMenu","CREATE EXAMPLE MENU","Add",MM.ItemAppearanceChoices.Transparent, MM.ItemIconStyleChoices.Filled,"Create Example Menu",false,true,true);
                  MM.CreateMenuItem("MenuBuilder","mbExampleMenuAbout","ABOUT EXAMPLE MENU","Question",MM.ItemAppearanceChoices.Transparent, MM.ItemIconStyleChoices.Filled,"Create Example Menu",true,false,true);
                  MM.CreateSpacer("menuBuilder",true);
                  MM.CreateMenuItem("MenuBuilder","mbReset","RESET","DismissCircle",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Clear Demo Menu Items",false,true,true);
                  MM.CreateMenuItem("menuBuilder","miNavPerf","PERF LOG","ArrowRight",MM.ItemAppearanceChoices.Primary,MM.ItemIconStyleChoices.Filled,"View Performance Log",false,false,true);


                  MM.DeleteMenu("mbhelper_view");
                  MM.CreateMenuItem("mbHelper_View","mbhJSON","MENU JSON","Eye",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Menu JSON",false,false,true);
                  MM.CreateMenuItem("mbHelper_View","mbhMenuProps","MENU INFO","Info",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Menu Properties",false,false,true);
                  MM.CreateMenuItem("mbHelper_View","mbhInputProps","INPUT PROPERTIES","Edit",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Input Properties",false,false,true);
                  MM.CreateMenuItem("mbHelper_View","mbhOutputProps","OUTPUT PROPERTIES","Eye",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Output Properties",false,false,true);
                  MM.CreateMenuItem("mbHelper_View","mbhOutputFunctions","OUTPUT FUNCTIONS","Eye",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Output Functions",false,false,true);
                  MM.CreateMenuItem("mbHelper_View","mbhMenuItems","CURRENT MENU ITEMS","List",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Current Menu Items",false,false,true);
                  MM.CreateMenuItem("mbHelper_View","mbhActions","COMPONENT ACTIONS","List",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"View Component Actions",false,false,true);

                  MM.DeleteMenu("mbhelper_build");
                  MM.CreateInfoItem("mbHelper_Build","MENU ITEMS",MM.ItemAppearanceChoices.Transparent,"",true);
                  MM.CreateSpacer("mbHelper_Build",true);
                  MM.CreateMenuItem("mbHelper_Build","mbbSave","Create Item","Save",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Save Menu Item",false,true,true);
                  MM.CreateMenuItem("mbHelper_Build","mbbCreateSpacer","New Spacer","Circle",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Create Menu Item Spacer",false,false,true);
                  MM.CreateMenuItem("mbHelper_Build","mbbDelete","Remove Item","Delete",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Delete Menu Item",false,true,true);
                  //MM.CreateMenuItem("mbHelper_Build","mbbUndo","Revert Item","ArrowUndo",MM.ItemAppearanceChoices.Primary, MM.ItemIconStyleChoices.Filled,"Undo Menu Item",false,true,true);
                  MM.CreateSpacer("mbHelper_Build",true);
                  MM.CreateInfoItem("mbHelper_Build","AIN'T THIS COOL?",MM.ItemAppearanceChoices.Transparent,"",true);

                  MM.DeleteMenu("pbmenuperflog");
                  MM.CreateMenuItem("pbMenuPerfLog","sortStartToggle","Sort Start Desc","ArrowSort",MM.ItemAppearanceChoices.Outline, MM.ItemIconStyleChoices.Filled,"Sort by Start ",false,false,true);
                  MM.CreateMenuItem("pbMenuPerfLog","sortElapsedToggle","Sort Elapsed Desc","ArrowSort",MM.ItemAppearanceChoices.Outline, MM.ItemIconStyleChoices.Filled,"Sort by Elapsed",false,false,true);
                  Set(spin,Blank());
            Text: ="REBUILD MENUS"
            Width: =126
            X: =btnDemoIsBusy.X + btnDemoIsBusy.Width + 20
            Y: =MM.Y + MM.Height + 10
      - githubProfile:
          Control: Image@2.2.3
          Properties:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderThickness: =2
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FocusedBorderThickness: =4
            Height: =64
            HoverBorderColor: =RGBA(0, 46, 255, 1)
            HoverFill: =RGBA(180, 214, 250, 1)
            Image: =github
            ImagePosition: =ImagePosition.Stretch
            OnSelect: =MM.DoMenu(MM.MenuKey,"launchgithub")
            PressedBorderColor: =RGBA(0, 0, 0, 0)
            PressedFill: =RGBA(0, 0, 0, 0)
            Tooltip: ="lopperman @ github"
            Width: =50
            X: =btnDemoRebuildMenus.X + btnDemoRebuildMenus.Width + 20
            Y: =102
      - redditProfile:
          Control: Image@2.2.3
          Properties:
            BorderColor: =RGBA(0, 0, 0, 0)
            BorderThickness: =2
            DisabledBorderColor: =RGBA(0, 0, 0, 0)
            DisabledFill: =RGBA(0, 0, 0, 0)
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FocusedBorderThickness: =4
            Height: =64
            HoverBorderColor: =RGBA(0, 46, 255, 1)
            HoverFill: =RGBA(180, 214, 250, 1)
            Image: =reddit
            OnSelect: =MM.DoMenu(MM.MenuKey,"launchreddit")
            PressedBorderColor: =RGBA(0, 0, 0, 0)
            PressedFill: =RGBA(0, 0, 0, 0)
            Tooltip: ="ITFuture @ reddit"
            Width: =50
            X: '=githubProfile.X + githubProfile.Width + 20 '
            Y: =102
      - btnDemoIsNotBusy_1:
          Control: Button@0.0.45
          Properties:
            BasePaletteColor: =PowerAppsTheme.Colors.Lighter60
            BorderColor: =RGBA(224, 86, 6, 1)
            BorderStyle: =BorderStyle.Solid
            BorderThickness: =1
            DisplayMode: =If(spin.waiting=true,DisplayMode.Disabled, DisplayMode.Edit)
            FontWeight: =FontWeight.Bold
            Height: =btnDemoRebuildMenus.Height
            OnSelect: =MM.DoMenu(MM.MenuKey,"google")
            Text: "=\"Use non-existing menu item ('google')\" "
            Width: =160
            X: '=redditProfile.X + redditProfile.Width + 20 '
            Y: '=btnDemoRebuildMenus.Y '
      - TextCanvas5:
          Control: Text@0.0.51
          Properties:
            AutoHeight: =true
            FontColor: =clr_BLUEBERRY
            Text: |-
              =$"'pbMenu_LogPerformance' global variable set to: {pbMenu_LogPerformance}"
            VerticalAlign: =VerticalAlign.Middle
            Width: =400
            X: =pbMenu_Vert_1.X + pbMenu_Vert_1.Width + 10
            Y: =173
